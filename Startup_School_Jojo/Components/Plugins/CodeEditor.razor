@using Microsoft.AspNetCore.SignalR.Client;
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
<div style="margin:10px 0;">
        Theme:
        <select @onchange="ChangeTheme">
            <option value="vs">Visual Studio</option>
            <option value="vs-dark">Visual Studio Dark</option>
            <option value="hc-black">High Contrast Black</option>
        </select>
    </div>

<StandaloneCodeEditor @ref="_editor" Id="sample-code-editor-123" OnDidChangeModelContent="UpdateMessage" ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorOnDidInit" OnContextMenu="OnContextMenu" />
<style>
    .monaco-editor-container {
        height: 300px;
    }
    
</style>
@code {
    private StandaloneCodeEditor _editor = null!;
    private HubConnection hubConnection = null;
    private TextModel Message = null;
    private string Text = null;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            Language = "javascript",
            GlyphMargin = true,
            Value = "\"use strict\";\n" +
                    "function Person(age) {\n" +
                    "	if (age) {\n" +
                    "		this.age = age;\n" +
                    "	}\n" +
                    "}\n" +
                    "Person.prototype.getAge = function () {\n" +
                    "	return this.age;\n" +
                    "};\n"
        };
    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/codeEditor"))
            .Build();

        hubConnection.On<TextModel, string>("ReceiveMessage", async (message,text) =>
        {
            Text = await _editor.GetValue();
            if (text == Text)
            {
                return;
            }
            Message = message;
            await _editor.SetModel(Message);
            await _editor.SetValue(text);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
    private async Task EditorOnDidInit()
    {
        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };

        decorationIds = await _editor.DeltaDecorations(null, newDecorations);
        // You can now use 'decorationIds' to change or remove the decorations

    }
    private string[] decorationIds = new string[0];
    private void OnContextMenu(EditorMouseEvent eventArg)
    {
        Console.WriteLine("OnContextMenu : " + System.Text.Json.JsonSerializer.Serialize(eventArg));
    }

    private async Task ChangeTheme(ChangeEventArgs e)
    {
        Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
        await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, e.Value?.ToString());
    }
    private async Task UpdateMessage(ModelContentChangedEvent e)
    {
        Message = await _editor.GetModel();
        var text = await _editor.GetValue();
        if (text == Text)
        {
            return;
        }
        await hubConnection.InvokeAsync("SendMessage", Message, text);
    }
}
